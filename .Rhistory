} else {
# Jogando resultado em uma tabela
result_search <- twListToDF(result_search)
result_text <- result_search[, c(8, 1)]
# Escreve resultado em arquivo CSV
write.table(
result_search,
"result_search.csv",
append = F,
row.names = F,
col.names = T,
sep = ","
)
################### Análise de Text Mining
# https://cran.r-project.org/web/packages/tidytext/vignettes/tidytext.html
# https://www.tidytextmining.com/sentiment.html
# Passa de Coluna para linhas
result_words <- result_text %>%
unnest_tokens(word, text)
# Retira stop words
cleaned_words <- result_words %>%
anti_join(get_stopwords())
# Conta palavras mais usadas
word_count <- cleaned_words %>%
count(word, sort = TRUE)
# Tabela de sentimento de palavras (negativa ou positiva)
sentimento_tbl <- get_sentiments("bing")
# Cria tabela de com sentimento dos twitts
tweets_sentiment <- cleaned_words %>%
inner_join(sentimento_tbl) %>%
count(id, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# Mostra resultado de determinado tweet
tweets_sentiment_text = result_text %>%
inner_join(tweets_sentiment)
#ggplot(tweets_sentiment_text, aes(id, sentiment, fill = id)) +
#  geom_bar(stat = "identity", show.legend = FALSE) +
#  facet_wrap(~id, ncol = 2, scales = "free_x")
}
View(result_search)
View(result_search)
result_text <- result_search[, c(5, 8, 1)]
View(result_text)
result_text <- result_search[, c(as.character(5), 8, 1)]
result_text["created"] = result_text["created"]
result_text["created"] = substr(result_text["created"],1,10)
result_text <- result_search[, c(5, 8, 1)]
result_text <- result_search[, c(5, 8, 1)]
result_text["created"] = substr(result_text[, c(5)],1,10)
result_text["created"] = substr(result_text["created"].value,1,10)
result_text <- result_search[, c(5, 8, 1)]
result_text["created"] = Sys.Date()-1
result_text <- result_search[, c(5, 8, 1)]
result_text["created"] = as.character(Sys.Date()-1)
result_text <- result_search[, c(5, 8, 1)] %>%
mutate(created = "1")
result_text <- result_search[, c(5, 8, 1)] %>%
mutate(created = substr(created,1,10))
# Bibliotecas Necessárias
library(twitteR)
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(tidyr)
library(ggplot2)
# Limpa Frames
result_text = NULL
result_words = NULL
cleaned_words = NULL
word_count = NULL
tweets_sentiment = NULL
tweets_sentiment_text = NULL
# Diretório onde serão depositados os arquivos
setwd("C:/Users/filip/OneDrive/Documentos/R/Data")
# Passando parâmetros de Autorizacao da API: consumer-key, consumer-secret, access-token, access-secret
setup_twitter_oauth(
"WB2rYeu8aWDhYsuSraW79NtsD",
"3KjvRFAy2FaJDUuobWVorW7I7pbFmV0cciXMZB08SNZrYhuwHJ",
"1041048259052167169-si5AVGLaIimwScKkAxISCZyCMYo0qb",
"yU25lo80OTb0LkZCf9OpWeUtDuBImcTua5oVwGR5nFiPF"
)
# Termo da pesquisa
terms <-
c("homeschooling", "homeschool")
terms_search <- paste(terms, collapse = " OR ")
# Inicia Pesquisa no Twitter
result_search <-
searchTwitter(
terms_search,
n = 3000,
lang = "en",
since = as.character(Sys.Date()-1),
until = as.character(Sys.Date())
)
result_search = strip_retweets(result_search)
if (length(result_search) ==
0) {
print("Nenhum registro encontrado.")
} else {
# Jogando resultado em uma tabela
result_search <- twListToDF(result_search)
# Utilizando somente campos necessários
result_text <- result_search[, c(5, 8, 1)] %>%
mutate(created = substr(created,1,10))
# Escreve resultado em arquivo CSV
write.table(
result_search,
"result_search.csv",
append = F,
row.names = F,
col.names = T,
sep = ","
)
################### Análise de Text Mining
# https://cran.r-project.org/web/packages/tidytext/vignettes/tidytext.html
# https://www.tidytextmining.com/sentiment.html
# Passa de Coluna para linhas
result_words <- result_text %>%
unnest_tokens(word, text)
# Retira stop words
cleaned_words <- result_words %>%
anti_join(get_stopwords())
# Conta palavras mais usadas
word_count <- cleaned_words %>%
count(word, sort = TRUE)
# Tabela de sentimento de palavras (negativa ou positiva)
sentimento_tbl <- get_sentiments("bing")
# Cria tabela de com sentimento dos twitts
tweets_sentiment <- cleaned_words %>%
inner_join(sentimento_tbl) %>%
count(id, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# Mostra resultado de determinado tweet
tweets_sentiment_text = result_text %>%
inner_join(tweets_sentiment)
#ggplot(tweets_sentiment_text, aes(id, sentiment, fill = id)) +
#  geom_bar(stat = "identity", show.legend = FALSE) +
#  facet_wrap(~id, ncol = 2, scales = "free_x")
}
View(result_search)
View(result_search)
View(result_text)
View(result_words)
View(result_words)
View(cleaned_words)
View(sentimento_tbl)
View(tweets_sentiment_text)
colnames(result_text)[colnames(result_text)=="created"] <- "date"
View(result_text)
colnames(result_text)[colnames(result_text)=="date"] <- "create_date"
View(result_text)
# Bibliotecas Necessárias
library(twitteR)
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(tidyr)
library(ggplot2)
# Limpa Frames
result_text = NULL
result_words = NULL
cleaned_words = NULL
word_count = NULL
sentimento_tbl = NULL
tweets_sentiment = NULL
tweets_sentiment_text = NULL
# Diretório onde serão depositados os arquivos
setwd("C:/Users/filip/OneDrive/Documentos/R/Data")
# Passando parâmetros de Autorizacao da API: consumer-key, consumer-secret, access-token, access-secret
setup_twitter_oauth(
"WB2rYeu8aWDhYsuSraW79NtsD",
"3KjvRFAy2FaJDUuobWVorW7I7pbFmV0cciXMZB08SNZrYhuwHJ",
"1041048259052167169-si5AVGLaIimwScKkAxISCZyCMYo0qb",
"yU25lo80OTb0LkZCf9OpWeUtDuBImcTua5oVwGR5nFiPF"
)
# Termo da pesquisa
terms <-
c("homeschooling", "homeschool")
terms_search <- paste(terms, collapse = " OR ")
# Inicia Pesquisa no Twitter
result_search <-
searchTwitter(
terms_search,
n = 3000,
lang = "en",
since = as.character(Sys.Date()-1),
until = as.character(Sys.Date())
)
result_search = strip_retweets(result_search)
if (length(result_search) ==
0) {
print("Nenhum registro encontrado.")
} else {
# Jogando resultado em uma tabela
result_search <- twListToDF(result_search)
# Utilizando somente campos necessários
result_text <- result_search[, c(5, 8, 1)] %>%
mutate(created = substr(created,1,10))
# Muda nome da coluna com a data
colnames(result_text)[colnames(result_text)=="created"] <- "date"
# Escreve resultado em arquivo CSV
write.table(
result_search,
"result_search.csv",
append = F,
row.names = F,
col.names = T,
sep = ","
)
################### Análise de Text Mining
# https://cran.r-project.org/web/packages/tidytext/vignettes/tidytext.html
# https://www.tidytextmining.com/sentiment.html
# Passa de Coluna para linhas
result_words <- result_text %>%
unnest_tokens(word, text)
# Retira stop words
cleaned_words <- result_words %>%
anti_join(get_stopwords())
# Conta palavras mais usadas
word_count <- cleaned_words %>%
count(word, sort = TRUE)
# Tabela de sentimento de palavras (negativa ou positiva)
sentimento_tbl <- get_sentiments("bing")
# Cria tabela de com sentimento dos twitts
tweets_sentiment <- cleaned_words %>%
inner_join(sentimento_tbl) %>%
count(id, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# Mostra resultado de determinado tweet
tweets_sentiment_text = result_text %>%
inner_join(tweets_sentiment)
#ggplot(tweets_sentiment_text, aes(id, sentiment, fill = id)) +
#  geom_bar(stat = "identity", show.legend = FALSE) +
#  facet_wrap(~id, ncol = 2, scales = "free_x")
}
View(tweets_sentiment_text)
# Escreve resultado em arquivo CSV
write.table(
tweets_sentiment_text,
"tweets_sentiment.csv",
append = F,
row.names = F,
col.names = T,
sep = ","
)
# Escreve resultado em arquivo CSV
write.table(
tweets_sentiment_text,
"tweets_sentiment.csv",
append = T,
row.names = F,
col.names = T,
sep = ";"
)
# Escreve resultado em arquivo CSV
write.table(
tweets_sentiment_text,
"tweets_sentiment.csv",
append = T,
row.names = F,
col.names = T,
sep = ";"
)
# Cria tabela de com sentimento dos twitts
tweets_sentiment <- cleaned_words %>%
inner_join(sentimento_tbl) %>%
count(date, id, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# Mostra resultado de determinado tweet
tweets_sentiment_text = result_text %>%
inner_join(tweets_sentiment)
View(tweets_sentiment_text)
View(tweets_sentiment)
View(tweets_sentiment_text)
ggplot(tweets_sentiment_text, aes(index, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x")
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x")
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x")
# Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(1, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x")
# Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x")
# 1. Open jpeg file
jpeg("rplot.jpg", width = 350, height = "350")
# 1. Open jpeg file
jpeg("rplot.jpg", width = 350, height = "350")
# 1. Open jpeg file
jpeg("rplot.jpg", width = 350, height = 350)
# 2. Create the plot
plot(x = my_data$wt, y = my_data$mpg,
pch = 16, frame = FALSE,
xlab = "wt", ylab = "mpg", col = "#2E9FDF")
# 3. Close the file
dev.off()
# 1. Open jpeg file
jpeg("rplot.jpg", width = 350, height = 350)
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x")
# 3. Close the file
dev.off()
##### Análise de Text Mining #####
# Bibliotecas Necessárias
library(twitteR)
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(tidyr)
library(ggplot2)
# Limpa Frames
result_text = NULL
result_words = NULL
cleaned_words = NULL
word_count = NULL
sentimento_tbl = NULL
tweets_sentiment = NULL
tweets_sentiment_text = NULL
# Diretório onde serão depositados os arquivos
setwd("C:/Users/filip/OneDrive/Documentos/GitHub/mangosearchtool")
# Passando parâmetros de Autorizacao da API: consumer-key, consumer-secret, access-token, access-secret
setup_twitter_oauth(
"WB2rYeu8aWDhYsuSraW79NtsD",
"3KjvRFAy2FaJDUuobWVorW7I7pbFmV0cciXMZB08SNZrYhuwHJ",
"1041048259052167169-si5AVGLaIimwScKkAxISCZyCMYo0qb",
"yU25lo80OTb0LkZCf9OpWeUtDuBImcTua5oVwGR5nFiPF"
)
# Termo da pesquisa
terms <-
c("homeschooling", "homeschool")
terms_search <- paste(terms, collapse = " OR ")
# Inicia Pesquisa no Twitter
result_search <-
searchTwitter(
terms_search,
n = 3000,
lang = "en",
since = as.character(Sys.Date()-1),
until = as.character(Sys.Date())
)
result_search = strip_retweets(result_search)
if (length(result_search) ==
0) {
print("Nenhum registro encontrado.")
} else {
# Jogando resultado em uma tabela
result_search <- twListToDF(result_search)
# Utilizando somente campos necessários
result_text <- result_search[, c(5, 8, 1)] %>%
mutate(created = substr(created,1,10))
# Muda nome da coluna com a data
colnames(result_text)[colnames(result_text)=="created"] <- "date"
# Passa de Coluna para linhas
result_words <- result_text %>%
unnest_tokens(word, text)
# Retira stop words
cleaned_words <- result_words %>%
anti_join(get_stopwords())
# Conta palavras mais usadas
word_count <- cleaned_words %>%
count(word, sort = TRUE)
# Tabela de sentimento de palavras (negativa ou positiva)
sentimento_tbl <- get_sentiments("bing")
# Cria tabela de com sentimento dos twitts
tweets_sentiment <- cleaned_words %>%
inner_join(sentimento_tbl) %>%
count(date, id, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# Mostra resultado de determinado tweet
tweets_sentiment_text = result_text %>%
inner_join(tweets_sentiment)
##### Plota Gráfico do Dia
# 1. Abre arquivo
jpeg(paste("sentiment_",as.character(Sys.Date()-1),".jpg"), width = 350, height = 350)
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x")
# 3. Fechar arquivo
dev.off()
# Escreve resultado em arquivo CSV
write.table(
tweets_sentiment_text,
"tweets_sentiment.csv",
append = T,
row.names = F,
col.names = T,
sep = ";"
)
}
################### Bibliografia:
# https://cran.r-project.org/web/packages/tidytext/vignettes/tidytext.html
# https://www.tidytextmining.com/sentiment.html
##### Plota Gráfico do Dia
# 1. Abre arquivo
jpeg(paste("sentiment_",as.character(Sys.Date()-1),".jpg"), width = 350, height = 350)%>%
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x")%>%
# 3. Fechar arquivo
dev.off()
##### Plota Gráfico do Dia
# 1. Abre arquivo
jpeg(paste("sentiment_",as.character(Sys.Date()-1),".jpg"), width = 350, height = 350)
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x")
# 3. Fechar arquivo
dev.off()
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x")
##### Plota Gráfico do Dia
# 1. Abre arquivo
jpeg(paste("sentiment_",as.character(Sys.Date()-1),".jpg"), width = 350, height = 350)+
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x")
##### Plota Gráfico do Dia
# 1. Abre arquivo
jpeg(paste("sentiment_",as.character(Sys.Date()-1),".jpg"), width = 350, height = 350)+
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x") +
# 3. Fechar arquivo
dev.off()
##### Plota Gráfico do Dia
# 1. Abre arquivo
jpeg(paste("sentiment_",as.character(Sys.Date()-1),".jpg"), width = 350, height = 350)+
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x") +
# 3. Fechar arquivo
dev.off()
##### Plota Gráfico do Dia
# 1. Abre arquivo
jpeg(paste("sentiment_",as.character(Sys.Date()-1),".jpg"), width = 350, height = 350)+
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x") +
# 3. Fechar arquivo
dev.off()
##### Plota Gráfico do Dia
# 1. Abre arquivo
jpeg(paste("sentiment_",as.character(Sys.Date()-1),".jpg"), width = 350, height = 350)+
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x") +
# 3. Fechar arquivo
dev.off()
##### Plota Gráfico do Dia
# 1. Abre arquivo
jpeg(paste("sentiment_",as.character(Sys.Date()-1),".jpg"), width = 350, height = 350)+
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x") +
# 3. Fechar arquivo
dev.off()
##### Plota Gráfico do Dia
# 1. Abre arquivo
jpeg(paste("sentiment_",as.character(Sys.Date()-1),".jpg"), width = 350, height = 350)+
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x") +
ggsave(paste("sentiment_",as.character(Sys.Date()-1),".jpg"))
##### Plota Gráfico do Dia
# 1. Abre arquivo
jpeg(paste("sentiment_",as.character(Sys.Date()-1),".jpg"), width = 350, height = 350)+
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x") +
ggsave(paste("sentiment_",as.character(Sys.Date()-1),".jpg"))
# 2. Gráfico de Sentimento do dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x") +
ggsave(paste("sentiment_",as.character(Sys.Date()-1),".jpg"))
dev.off ()
##### Plota Gráfico do Dia
ggplot(tweets_sentiment_text, aes(id, sentiment, fill = date)) +
geom_bar(stat = "identity", show.legend = FALSE) +
facet_wrap(~date, ncol = 2, scales = "free_x") +
ggsave(paste("sentiment_",as.character(Sys.Date()-1),".jpg")) +
dev.off ()
